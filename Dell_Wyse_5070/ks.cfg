#----------------------------------------------MAIN INSTALLER SETTINGS

#version=OL9
# License agreement
eula --agreed
# Use graphical install
graphical
# Disable the Setup Agent on first boot
firstboot --disable
# Keyboard layouts
keyboard --xlayouts='pl'
# System language
lang pl_PL.UTF-8 --addsupport=en_GB.UTF-8

#----------------------------------------------MAIN REPOSITORIES CONFIGURATION

# Use network installation
url --url="https://yum.oracle.com/repo/OracleLinux/OL9/baseos/latest/x86_64"
repo --name=ol9_AppStream --baseurl="https://yum.oracle.com/repo/OracleLinux/OL9/appstream/x86_64"
repo --name=ol9_EPEL --baseurl="https://yum.oracle.com/repo/OracleLinux/OL9/developer/EPEL/x86_64"

#----------------------------------------------NETWORK CONFIGURATION

# Network information
network --hostname=srv01.maku.local
# Network configuration
network --device=link --bootproto=static --ip=172.25.100.10 --netmask=255.255.255.0 --gateway=172.25.100.1 --nameserver=1.1.1.1 --hostname=srv01.maku.local --noipv6 --activate --onboot=yes
# System timezone
timezone --utc Europe/Warsaw
# Time Source from MikroTik
timesource --ntp-server=172.25.100.1

#----------------------------------------------DISK CONFIGURATION

# Partition clearing information
clearpart --all --initlabel

# Pre-installation steps
%pre
DISK1=$(lsblk -r -d -n -o NAME,TYPE,SIZE,RO | awk '$2 == "disk" && $4 == "0"' | sort -k3 -rh | head -n1 | awk '{print $1}')
DISK2=$(lsblk -r -d -n -o NAME,TYPE,SIZE,RO | awk '$2 == "disk" && $4 == "0"' | sort -k3 -rh | head -n2 | tail -n1 | awk '{print $1}')

echo "ignoredisk --only-use=/dev/${DISK1},/dev/${DISK2}" > /tmp/disk-vars.cfg

# -- raid part for /boot --
echo "part raid.${DISK1}0 --size=1024 --ondrive=${DISK1}" >> /tmp/disk-vars.cfg
echo "part raid.${DISK2}0 --size=1024 --ondrive=${DISK2}" >> /tmp/disk-vars.cfg
# -- raid part for /boot/efi --
echo "part raid.${DISK1}1 --size=512  --ondrive=${DISK1}" >> /tmp/disk-vars.cfg
echo "part raid.${DISK2}1 --size=512  --ondrive=${DISK2}" >> /tmp/disk-vars.cfg
# -- raid part for pv.1 --
echo "part raid.${DISK1}2 --size=409600 --ondrive=${DISK1} --grow" >> /tmp/disk-vars.cfg
echo "part raid.${DISK2}2 --size=409600 --ondrive=${DISK2} --grow" >> /tmp/disk-vars.cfg
# Raid device creation

echo "raid /boot --fstype='xfs' --device='boot' --level=RAID1 raid.${DISK1}0 raid.${DISK2}0" >> /tmp/disk-vars.cfg
echo "raid /boot/efi --fstype='efi' --device='boot-efi' --level=RAID1 raid.${DISK1}1 raid.${DISK2}1" >> /tmp/disk-vars.cfg
echo "raid pv.1 --device='root' --level=RAID1 raid.${DISK1}2 raid.${DISK2}2" >> /tmp/disk-vars.cfg

# Volume group and logical volume creation
echo "volgroup vg_main pv.1" >> /tmp/disk-vars.cfg
echo "logvol / --fstype='xfs' --size=409600 --name=root --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol / --fstype='xfs' --size=30720 --name=root --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /home --fstype='xfs' --size=10240 --name=home --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /tmp --fstype='xfs' --size=2048 --name=tmp --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /usr --fstype='xfs' --size=10240 --name=usr --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /var --fstype='xfs' --size=10240 --name=var --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /var/tmp --fstype='xfs' --size=2048 --name=var-tmp --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /var/log --fstype='xfs' --size=4096 --name=var-log --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /var/log/audit --fstype='xfs' --size=4096 --name=var-log-audit --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /var/lib/libvirt --fstype='xfs' --size=10240 --name=var-lib-libvirt --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /var/lib/docker --fstype='xfs' --size=4096 --name=var-lib-docker --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /var/lib/containerd --fstype='xfs' --size=40960 --name=var-lib-containerd --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /var/lib/kubelet --fstype='xfs' --size=30720 --name=var-lib-kubelet --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /var/lib/etcd --fstype='xfs' --size=5120 --name=var-lib-etcd --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /etc/libvirt --fstype='xfs' --size=2048 --name=etc-libvirt --vgname=vg_main" >> /tmp/disk-vars.cfg
###echo "logvol /share --fstype='xfs' --size=204800 --name=share --vgname=vg_main" >> /tmp/disk-vars.cfg

# Set the RAID device 'boot' as the first drive in the BIOS boot order.
echo "bootloader --location=mbr --boot-drive=${DISK1} --driveorder=boot" >> /tmp/disk-vars.cfg
echo "bootloader --location=mbr --boot-drive=${DISK2} --driveorder=boot" >> /tmp/disk-vars.cfg
%end

%include /tmp/disk-vars.cfg

#----------------------------------------------ROOT USER CONFIGURATION

# Root password
rootpw --allow-ssh --plaintext <HIDDEN_DATA>
user --groups=wheel --name=makusa --password=<HIDDEN_DATA>

#----------------------------------------------CONFIGURING ADDITIONAL SETTINGS

# Disable Kdump
%addon com_redhat_kdump --disable
%end
# Disable/Enable services
services --disabled="kdump" --enabled="NetworkManager,sshd"
# State of SELinux on the installed system
selinux --permissive
# Shutdown after installation
reboot
# Install additional packages
%packages
@^minimal-environment
@core
%end

#----------------------------------------------PREPARE POST-INSTALLATION STEPS

# Post-installation steps
%post --interpreter=/usr/bin/bash --log=/root/ks-post.log
# Save logs from %pre step
cat >> /root/ks-pre.cfg << "EOF"
%include /tmp/disk-vars.cfg
EOF

# Install EPEL repository and base packages
dnf install -y dnf-utils
dnf install -y epel-release
dnf update -y
# common
dnf install -y net-tools nano vim htop traceroute mc openssl screen tree tar rsync less python3 python3-pip mdadm tmux pykickstart fzf bat inotify-tools make mtools expect
sudo rpm -Uvh $(curl -s https://api.github.com/repos/charmbracelet/glow/releases/latest | grep -oP 'https.*?glow-.*?x86_64\.rpm')
# security
dnf install -y nmap netcat nmap-ncat hping3 tcpdump 
# services
dnf install -y fail2ban logrotate
pip install ansi2html

# Enable log rotation
systemctl enable logrotate.service
sudo sed -i 's/^#MaxRetentionSec=.*/MaxRetentionSec=30d/' /etc/systemd/journald.conf

# Configure fail2ban
cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
systemctl enable fail2ban.service

# Set password policy
#sed -i -E 's/^# minlen =.*/minlen = 12/g' /etc/security/pwquality.conf

# Create auditd rules
#curl -o /etc/audit/rules.d/audit.rules https://raw.githubusercontent.com/Neo23x0/auditd/master/audit.rules
auditctl -l

# Install Virtualization
dnf install -y @virtualization
systemctl enable libvirtd.service
usermod -aG libvirt makusa

# Install Docker
groupadd -g 977 docker
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
dnf remove -y docker docker-* podman runc
dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin container-selinux
systemctl enable docker.service
#setsebool container_manage_cgroup 1
usermod -aG docker makusa

cat >> /etc/docker/daemon.json << "EOF"
{
  "ip-masq": true,
  "bridge": "none",
  "dns": [
    "192.168.200.40"
  ],
  "selinux-enabled": false,
  "no-new-privileges": true,
  "labels": [
    "maintainer=Maku"
  ],
  "log-driver": "json-file",
  "log-level": "info",
  "log-opts": {
    "max-file": "3",
    "max-size": "10m"
  }
}
EOF

# Install Kubernetes
#dnf install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
#systemctl enable kubelet.service

# Create maku user
groupadd -g 1500 maku
useradd maku -c "Maku" -u 1500 -g 1500 -p $(openssl passwd -1 "<HIDDEN_DATA>") -m --shell /bin/bash
usermod -aG libvirt maku
usermod -aG docker maku
usermod -g docker maku

# Create systemd service unit file for maintaining permissions to /share for group "docker"
chown -R :docker /share

cat >> /etc/systemd/system/share-permissions.service << "EOF"
[Unit]
Description=Maintain /share permissions for docker group
After=network.target

[Service]
Type=oneshot
User=root
Group=root
ExecStart=/usr/bin/setfacl -Rm g:docker:rwx /share
ExecStart=/usr/bin/setfacl -Rdm g:docker:rwx /share
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable share-permissions.service
# Configure tmux
cat >> /etc/tmux.conf << "EOF"
# Change prefix key from the default 'Ctrl-b' to 'Ctrl-a'
set-option -g prefix C-a
# Bind 'a' to send the prefix key in case you're working in a nested tmux session
bind-key a send-prefix
# This line attempts to bind 'b' to 'set-option status', but it's incomplete.
# Likely an error or an unfinished binding.
bind-key b set-option status
# Bind 'm' to enable mouse mode, allowing mouse interaction with panes and window resizing
bind-key m setw -g mode-mouse on \; set -g mouse-resize-pane on
# Bind 'r' to reload the tmux configuration file, useful for applying changes on-the-fly
bind-key r source-file ~/.tmux.conf
# Bind 'h' to split the current pane horizontally
bind-key h split-window -h
# Bind 'v' to split the current pane vertically
bind-key v split-window -v
# Bind 'u' to attach to the most recent tmux session and detach it from other clients
bind-key u attach -d
# Set the status interval
set -g status-interval 1
# Improve scrollback history
set -g history-limit 5000
# Set the default terminal to 'screen-256color' to enable 256-color support
set -g default-terminal "screen-256color"
# Enable automatic updating of window titles based on the running program/command
set -g set-titles on
# Disable activity monitoring, so you won't receive notifications of activity in inactive windows
set -g monitor-activity off
# Set the base index for window numbers to 1 instead of the default 0, making windows numbered from 1
set -g base-index 1
# Set the background color of the status bar to 'colour234' (dark gray/blue tone)
set -g status-bg colour234
# Set the foreground color of the status bar text to white
set -g status-fg white
# Customize the appearance of inactive windows in the status bar:
# window index (#I) in 'colour245' (light gray) and window name (#W) in 'colour250' (lighter gray)
set-window-option -g window-status-format ' #[fg=colour245]#I:#[fg=colour250]#W '
# Customize the appearance of the currently active window in the status bar:
# background is black, window index (#I) in 'colour245' (light gray), and window name (#W) in 'colour196' (red)
set-window-option -g window-status-current-format '#[bg=black]#[fg=colour245] #I#[fg=colour245]:#[fg=colour196]#W '
# Customize the left side of the status bar to display the hostname (#h) with:
# background 'colour233' (very dark gray) and foreground 'colour196' (red)
set -g status-left "#[bg=colour233]#[fg=colour196] #h "
# Customize the right side of the status bar to display:
# - Uptime from the command `w | head -n1 | cut -d":" -f5`
# - Current date and time in the format 'dd-mm-yyyy hh:mm:ss'
# Background 'colour233' (very dark gray), uptime text in 'colour246' (gray), date/time in 'colour160' (red)
set -g status-right '#[bg=colour233]#[fg=colour246]#(w | head -n1 | cut -d":" -f5) #[fg=colour160]%d-%m-%Y %H:%M:%S '
# Set the terminal's window title to display the hostname (#H) and window name (#W)
set-option -g set-titles-string '[#H] #W'
# Set the color of the active pane's border to red
set-option -g pane-active-border-style fg=red
# Set the color of inactive pane borders to 'colour237' (dark gray)
set-option -g pane-border-style fg=colour237
# This is a duplicate of the earlier 'r' binding, allowing you to reload the config file
bind r source-file ~/.tmux.conf
EOF

# Configure bashrc
cat << 'END_OF_FILE' >> /etc/bashrc

export PS1='\[\e[38;5;32m\]┌─[\[\e[38;5;196m\]\u\[\e[38;5;32m\]@\[\e[38;5;251m\]\h\[\e[38;5;32m\]]-[\[\e[38;5;251m\]\t\[\e[38;5;32m\]]-[\[\e[93m\]\w\[\e[38;5;32m\]]\n└──╼\[\e[0m\] $ '

umask 007

# Wyłącz komunikaty terminala
mesg n 2> /dev/null || true

# Jeśli nie jesteśmy w sesji tmux, spróbuj podłączyć do istniejącej lub utwórz nową sesję
if which tmux > /dev/null && [ -z "$TMUX" ]; then
    # Sprawdzenie, czy istnieje jakaś sesja, do której można dołączyć
    tmux has-session -t shell 2>/dev/null
    if [ $? != 0 ]; then
        # Jeśli sesja nie istnieje, twórz nową o nazwie "shell"
        tmux new-session -s shell
    else
        # Jeśli sesja istnieje, dołącz do niej
        tmux attach -t shell
    fi
fi

# https://patorjk.com/software/taag/#p=display&h=0&v=0&f=Big&t=srv01.maku.local
cat << 'EOF'
                        ___    __                           _                  _                          _ 
                       / _ \  /_ |                         | |                | |                        | |
  ___   _ __  __   __ | | | |  | |      _ __ ___     __ _  | | __  _   _      | |   ___     ___    __ _  | |
 / __| | '__| \ \ / / | | | |  | |     | '_ ` _ \   / _` | | |/ / | | | |     | |  / _ \   / __|  / _` | | |
 \__ \ | |     \ V /  | |_| |  | |  _  | | | | | | | (_| | |   <  | |_| |  _  | | | (_) | | (__  | (_| | | |
 |___/ |_|      \_/    \___/   |_| (_) |_| |_| |_|  \__,_| |_|\_\  \__,_| (_) |_|  \___/   \___|  \__,_| |_|

EOF
END_OF_FILE

# Configure cron jobs
echo "0 1 * * 1 maku ([ \$(expr \$(date +\%W) \% 2) -eq 0 ] && cd /share/ && echo 4 | ./manage.sh && echo 2 | ./manage.sh && echo 3 | ./manage.sh && echo 1 | ./manage.sh) 2> >(logger -t cron-backup)" >> /etc/crontab
echo "0 5 * * 1 root ([ \$(expr \$(date +\%W) \% 2) -eq 0 ] && dnf update -y && dnf autoremove -y && dnf clean all) 2> >(logger -t cron-update)" >> /etc/crontab

# Finally clear dnf cache
dnf clean all

%end
